const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs, query, orderBy } = require('firebase/firestore');

// Configura√ß√£o do Firebase
const firebaseConfig = {
  apiKey: "AIzaSyAVaDdDt-k_MDB7Rj_tqqHSTysrRfHEVRg",
  authDomain: "offshore-nutrition-tracker.firebaseapp.com",
  projectId: "offshore-nutrition-tracker",
  storageBucket: "offshore-nutrition-tracker.firebasestorage.app",
  messagingSenderId: "275779212119",
  appId: "1:275779212119:web:d51f4e06605925b1c36412"
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function testHistoricoData() {
  console.log('üîç Testando dados do m√≥dulo de hist√≥rico...\n');

  try {
    // Testar matr√≠culas
    console.log('üìù Verificando matr√≠culas...');
    const enrollmentsRef = collection(db, 'enrollments');
    const enrollmentsQuery = query(enrollmentsRef, orderBy('createdAt', 'desc'));
    const enrollmentsSnapshot = await getDocs(enrollmentsQuery);
    
    console.log(`‚úÖ Encontradas ${enrollmentsSnapshot.size} matr√≠culas:`);
    enrollmentsSnapshot.forEach((doc) => {
      const data = doc.data();
      console.log(`  - ID: ${doc.id}`);
      console.log(`    UserId: ${data.userId}`);
      console.log(`    CourseId: ${data.courseId}`);
      console.log(`    Status: ${data.status}`);
      console.log(`    Grade: ${data.grade}`);
      console.log(`    Approved: ${data.approved}`);
      console.log(`    CompletionDate: ${data.completionDate?.toDate()}`);
      console.log(`    CreatedAt: ${data.createdAt?.toDate()}`);
      console.log('');
    });

    // Testar usu√°rios
    console.log('üë• Verificando usu√°rios...');
    const usersRef = collection(db, 'users');
    const usersSnapshot = await getDocs(usersRef);
    
    console.log(`‚úÖ Encontrados ${usersSnapshot.size} usu√°rios:`);
    usersSnapshot.forEach((doc) => {
      const data = doc.data();
      console.log(`  - ID: ${doc.id}`);
      console.log(`    Name: ${data.name}`);
      console.log(`    Email: ${data.email}`);
      console.log(`    Profile: ${data.profile}`);
      console.log(`    CompanyId: ${data.companyId}`);
      console.log('');
    });

    // Testar cursos
    console.log('üìö Verificando cursos...');
    const coursesRef = collection(db, 'courses');
    const coursesSnapshot = await getDocs(coursesRef);
    
    console.log(`‚úÖ Encontrados ${coursesSnapshot.size} cursos:`);
    coursesSnapshot.forEach((doc) => {
      const data = doc.data();
      console.log(`  - ID: ${doc.id}`);
      console.log(`    Title: ${data.title || data.titulo}`);
      console.log(`    InstructorId: ${data.instructorId}`);
      console.log('');
    });

    // Testar empresas
    console.log('üè¢ Verificando empresas...');
    const companiesRef = collection(db, 'companies');
    const companiesSnapshot = await getDocs(companiesRef);
    
    console.log(`‚úÖ Encontradas ${companiesSnapshot.size} empresas:`);
    companiesSnapshot.forEach((doc) => {
      const data = doc.data();
      console.log(`  - ID: ${doc.id}`);
      console.log(`    Name: ${data.name}`);
      console.log(`    Status: ${data.status}`);
      console.log('');
    });

    // An√°lise de relacionamentos
    console.log('üîó An√°lise de relacionamentos...');
    const enrollments = [];
    const users = [];
    const courses = [];
    const companies = [];

    enrollmentsSnapshot.forEach((doc) => {
      enrollments.push({ id: doc.id, ...doc.data() });
    });

    usersSnapshot.forEach((doc) => {
      users.push({ id: doc.id, ...doc.data() });
    });

    coursesSnapshot.forEach((doc) => {
      courses.push({ id: doc.id, ...doc.data() });
    });

    companiesSnapshot.forEach((doc) => {
      companies.push({ id: doc.id, ...doc.data() });
    });

    console.log('üìä Estat√≠sticas:');
    console.log(`  - Matr√≠culas: ${enrollments.length}`);
    console.log(`  - Usu√°rios: ${users.length}`);
    console.log(`  - Cursos: ${courses.length}`);
    console.log(`  - Empresas: ${companies.length}`);

    // Verificar matr√≠culas com dados v√°lidos
    let validEnrollments = 0;
    let missingUsers = 0;
    let missingCourses = 0;

    enrollments.forEach(enrollment => {
      const user = users.find(u => u.id === enrollment.userId);
      const course = courses.find(c => c.id === enrollment.courseId);
      
      if (user && course) {
        validEnrollments++;
      } else {
        if (!user) missingUsers++;
        if (!course) missingCourses++;
      }
    });

    console.log('\nüîç Valida√ß√£o de dados:');
    console.log(`  - Matr√≠culas v√°lidas: ${validEnrollments}`);
    console.log(`  - Matr√≠culas com usu√°rio ausente: ${missingUsers}`);
    console.log(`  - Matr√≠culas com curso ausente: ${missingCourses}`);

    if (validEnrollments > 0) {
      console.log('\n‚úÖ Dados v√°lidos encontrados! O hist√≥rico deve funcionar.');
    } else {
      console.log('\n‚ùå Nenhuma matr√≠cula v√°lida encontrada. Verifique os relacionamentos.');
    }

  } catch (error) {
    console.error('‚ùå Erro ao testar dados:', error);
  }
}

testHistoricoData(); 